import java.util.*;

public class WordGrid{

    private char[][] data;

    /**Initialize the grid to the size specified and fill all of the positions
     *with spaces.
     *@param row is the starting height of the WordGrid
     *@param col is the starting width of the WordGrid
     */
    
    public WordGrid(int rows,int cols){
	char[][] grid  = new char[rows][cols];
	int x = 0;
	int y = 0;
	while(x < rows){
	    while(y < cols){
		grid[x][y] = 'c';
		y++;
	    }
	    y = 0;
	    x++;
	}
	data = grid;
    }
	    
	
    

    /**Set all values in the WordGrid to spaces ' '*/
    public void clear(){
	int rows = data.length;
	int cols = data[0].length;
	int x = 0;
	int y = 0;
	while (x < rows){
	    while(y < cols){
		data[x][y] = ' ';
		y++;
	    }
	    y = 0;
	    x++;
	}
    }

    /**The proper formatting for a WordGrid is created in the toString.
     *@return a String with each character separated by spaces, and each row
     *separated by newlines.
     */
    public String toString(){
	int rows = data.length;
	int cols = data[0].length;
	String ans = "";
	int x = 0;
	int y = 0;
	while(x < rows){
	    while(y < cols){
		ans += data[x][y] + " ";
		y++;
	    }
	    y = 0;
	    x++;
	    ans += "\n";
	}
	return ans;
	
    }

    /**Attempts to add a given word to the specified position of the WordGrid.
     *The word is added from left to right, must fit on the WordGrid, and must
     *have a corresponding letter to match any letters that it overlaps.
     *
     *@param word is any text to be added to the word grid.
     *@param row is the vertical locaiton of where you want the word to start.
     *@param col is the horizontal location of where you want the word to start.
     *@return true when the word is added successfully. When the word doesn't fit,
     *or there are overlapping letters that do not match, then false is returned.
     */
    
    public boolean addWordHorizontal(String word,int row, int col){
	int rowLength = data[0].length;
	if (word.length() > rowLength - col && word.length() > rowLength - (row:ength - col)){
	    return false;
	}
	if (word.length() < rowLength - col && word.length() > 
	Random rand = new Random();
	int x = rand.nextInt(1);
	if (rand.nextInt
	    
    }

    //vertical + diagonal should be implemented as well.


}
