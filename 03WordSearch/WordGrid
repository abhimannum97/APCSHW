import java.util.*;
import java.io.*;
import java.io.File;

public class WordGrid{

    private char[][] data;
    Random rand = new Random();
    private ArrayList<String> words = new ArrayList<String>();
    
    
    public WordGrid(int rows,int cols){
	char[][] grid  = new char[rows][cols];
	int x = 0;
	int y = 0;
	while(x < rows){
	    while(y < cols){
		grid[x][y] = '_';
		y++;
	    }
	    y = 0;
	    x++;
	}
	data = grid;
	//	this.rand = new Random(seed);
    }

    public void setSeed(int seed){
	rand.setSeed(seed);
    }

    public WordGrid(){
	this(10,10);
    }


    public void clear(){
	int rows = data.length;
	int cols = data[0].length;
	int x = 0;
	int y = 0;
	while (x < rows){
	    while(y < cols){
		data[x][y] = ' ';
		y++;
	    }
	    y = 0;
	    x++;
	}
    }

    public String toString(){
	int rows = data.length;
	int cols = data[0].length;
	String ans = "";
	int x = 0;
	int y = 0;
	while(x < rows){
	    while(y < cols){
		ans += data[x][y] + " ";
		y++;
	    }
	    y = 0;
	    x++;
	    ans += "\n";
	}
	return ans;
	}


    public boolean addWord(String word, int startY, int startX, int shiftY, int shiftX){
	if (!(shiftX == 0 && shiftY == 0)){
	    if (checkWord(word, startY, startX, shiftY, shiftX)){
		for (int i = 0; i < word.length(); i++){ 
		    data[(startY + i * shiftY)-1][(startX + i * shiftX)-1] = word.charAt(i);
		}
	    }else
		return false;
	}
	return false;
    }
    
    public boolean checkWord(String word, int startY, int startX, int shiftY, int shiftX){
	if (fit(word,startY,startX,shiftY,shiftX) && overLap(word,startY,startX,shiftY,shiftX)){
	    return true;
	}else
	    return false;
    }
       

    public boolean fit(String word, int startY, int startX, int shiftY, int shiftX){
	boolean dy = false;
	boolean dx = false;
	int rowLength = data.length;
	int colLength = data[0].length;
	if (shiftY > 0){
	    if (word.length() < (colLength - startY + 1)){
		dy = true;
	    }	       
	}
	if (shiftY < 0){
	    if (word.length() < colLength - (colLength - startY)){
		dy = true;
	    }
	}
	if (shiftX > 0){
	    if (word.length() < (rowLength - startX + 1)){
		dx = true;
	    }
	}
	if (shiftX < 0){
	    if (word.length() < rowLength - (rowLength - startX)){
		dx = true;
	    }
	}
	if (shiftX == 0){
	    dx = true;
	}
	if (shiftY == 0){
	    dy = true;
	}
        return (dy && dx);
    }

    public boolean overLap(String word, int startY, int startX, int shiftY, int shiftX){
	int ans = 0;
	if (!fit(word,startY,startX,shiftY,shiftX)){
	    return false;
	}
	for (int i = 0; i < word.length(); i++){
	    if ((startY + i * shiftY)-1 > -1 && (startX + i * shiftX)-1 > -1){ 
		if (data[(startY + i * shiftY)-1][(startX + i * shiftX)-1] == '_' ||  data[(startY + i * shiftY)-1][(startX + i * shiftX)-1] == word.charAt(i)){
		    ans++;
		}
	    }
	}
	return (ans == word.length());
    }
	   			
	
    public void loadWordsFromFile(String fileName, boolean fillRandomLetters) throws FileNotFoundException{
	File file = new File(fileName);
	Scanner scan = new Scanner(file);
	ArrayList<String> wordBank = new ArrayList<String>();
	while (scan.hasNext()){
	    wordBank.add(scan.next());
	}
	
 	int x = 0;
	while(x < wordBank.size()){
	    int y = 0;
	    int r1 = rand.nextInt(data.length);
	    int r2 = rand.nextInt(data[0].length);
	    int r3 = rand.nextInt(3)-1;
	    int r4 = rand.nextInt(3)-1;
	    while (y<20){
		if (checkWord(wordBank.get(x),r1,r2,r3,r4)){
		    this.addWord(wordBank.get(x),r1,r2,r3,r4);
		    words.add(wordBank.get(x));
		    y+=50;
		}
		y++;
	    }
	    x++;
	}
	/*
	int numWords = ;
	for (int i = 0; i < 20; i++){
	    int r1 = rand.nextInt(data.length);
	    int r2 = rand.nextInt(data[0].length);
	    int r3 = rand.nextInt(3)-1;
	    int r4 = rand.nextInt(3)-1;
	    for(int x = 0; x < 10; x++){
		int y = rand.nextInt(numWords);
		if (checkWord(wordBank.get(y),r1,r2,r3,r4)){
		    addWord(wordBank.get(y),r1,r2,r3,r4);
		    wordBank.remove(y);
		    words.add(wordBank.get(y));
		    y--;
		    x +=10;
		}
	    }
	}
	*/
	if (fillRandomLetters){
	    /*
	    int a = 0;
	    int b = 0;
	    while(a<data.length){
		while(b<data[0].length){
		    if (data[a][b] == '_'){
			data[a][b] = (char)(rand.nextInt(26) + 97);
		    }
		    b++;
		}
		a++;
	    }
	}
	    */
	    for(int a = 0; a < data.length; a++){
		for (int b = 0; b < data[0].length; b++){
		    if (data[a][b] == '_'){
			data[a][b] = (char)(rand.nextInt(26) + 97);
		    }
		}
	    }
	}
    }

    public String wordInPuzzle(){
	String wordBank = "";
	int x = 0;
	for (int i = 0; i < words.size(); i++){
	    wordBank += words.get(i) + "         ";
	    x++;
	    if (x % 4 == 0){
		wordBank = wordBank + "\n";
	    }
	}
	return wordBank;
    }
	    

		    
		
		


}

   

    

    


    }
    
